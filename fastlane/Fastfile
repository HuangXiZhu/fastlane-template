fastlane_version "2.58.0"

default_platform :ios

platform :ios do

  before_all do
    xcversion(version: ENV["XCODE_VERSION"] || '~> 9.0')
    if !ENV["SKIP_COCOAPODS"]
      cocoapods(silent: true, repo_update: true)
    end
  end
  
  after_all do
    cleanup
  end
  
  desc "Runs all the tests."
  lane :runTests do
    scan(
      configuration: "Debug",
      output_types: "junit",
      device: ENV["DEVICE"] || 'iPhone 8 (11.0)',
    )
  end

  desc "Sets the version number to the given version or, if none is given, increments it."
  lane :incrementBuildNumber do |options|
    if options[:build].nil?
      increment_build_number
    else
      increment_build_number(build_number: options[:build])
    end
  end

  desc "Build the archive and ipa with options (configuration (Release), include_bitcode (false), export_method (enterprise))."
  lane :build do |options|
    options[:configuration] ||= "Release"
    options[:include_bitcode] ||= false
    options[:export_method] ||= "enterprise"
    
    installProfiles
    
    gym(
      configuration: options[:configuration],
      include_bitcode: options[:include_bitcode],
      export_method: options[:export_method]
    )
  end

  desc "Build and upload to Crashlytics with (configuration (Release)), (include_bitcode (false)), (export_method (enterprise)), and (group)."
  lane :beta do |options|
    options[:configuration] ||= "Release"
    options[:include_bitcode] ||= false
    options[:export_method] ||= "enterprise"
    options[:include_notes] ||= false


    raise "beta: A Crashlytics group must be passed as an option." unless options[:group]

    build(configuration: options[:configuration], include_bitcode: options[:include_bitcode], export_method: options[:export_method])
    
    if options[:include_notes]
      notes = "./notes.txt"
    else 
      notes = ""
    end

    crashlytics(
      crashlytics_path: './Pods/Crashlytics/',
      groups: options[:group],
      notifications: 'true',
      notes_path: notes,
    )
  end
  
  desc "Deletes the archive generated by gym."
  lane :cleanupArchive do
    if "#{lane_context[SharedValues::XCODEBUILD_ARCHIVE]}" != ""
      sh "rm -r \"#{lane_context[SharedValues::XCODEBUILD_ARCHIVE]}\""
    end
  end
  
  # Custom actions
  
  desc "Builds and uploads to Crashlytics an internal build - both for PR an Master"
  lane :betaInternal do |options|
    options[:build] ||= nil
    options[:isPRBuild] ||= false 
    incrementBuildNumber(build: options[:build]) 
    
    # prep the release notes based on the Jenkins commit log 
    sh "echo 'Branch:' ${GIT_BRANCH} > ../notes.txt"
    
    if options[:isPRBuild]
      sh "echo 'PR#:' ${ghprbPullId} >> ../notes.txt"
    end
    
    sh "echo $CHANGES_SINCE_SUCCESS >> ../notes.txt"
    
    raise "betaInternal: A Crashlytics group must be provided through the CRASHLYTICS_INTERNAL_GROUP environment variable." unless ENV["CRASHLYTICS_INTERNAL_GROUP"]
    
    beta(group: ENV["CRASHLYTICS_INTERNAL_GROUP"], include_notes: true)
  end
  
  desc "Submit a new build to Fabric Beta and notify the external DL UberRocket team"
  lane :betaExternal do |options|
    options[:build] ||= nil
    incrementBuildNumber(build: options[:build]) 

    sh "echo Client Beta Build > ../notes.txt"
    
    raise "betaExternal: A Crashlytics group must be provided through the CRASHLYTICS_EXTERNAL_GROUP environment variable." unless ENV["CRASHLYTICS_EXTERNAL_GROUP"]
    
    beta(group: ENV["CRASHLYTICS_EXTERNAL_GROUP"], include_notes: true)
  end
  
  desc "Deletes the archive generated by gym."
  lane :cleanupArchive do
    if "#{lane_context[SharedValues::XCODEBUILD_ARCHIVE]}" != ""
      sh "rm -r \"#{File.dirname(lane_context[SharedValues::XCODEBUILD_ARCHIVE])}\""
    end
  end
  
  desc "Kills the simulator and background process."
  lane :cleanupSimulator do
    # kill simulator
    sh "killall Simulator || :"
    # kill SimulatorService
    sh "killall -9 com.apple.CoreSimulator.CoreSimulatorService || :"
  end
  
  desc "Cleanup simulator and build archives."
  lane :cleanup do
    cleanupSimulator
    cleanupArchive
  end
  
end

desc "Installs any provisioning profiles in $PROFILE_DIRECTORY, relative to Fastlane's execution path."
lane :installProfiles do
  raise "installProfiles: PROFILE_DIRECTORY environment variable required." unless ENV["PROFILE_DIRECTORY"]
  
  Dir.glob("#{ENV["PROFILE_DIRECTORY"]}/*.mobileprovision") do |profile|
    FastlaneCore::ProvisioningProfile.install(profile)
  end
end
